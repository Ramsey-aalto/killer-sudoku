6.3 interim report
  Thus far , I have implemented  most of the logic of the program : ( there is one methods is missing which return
  the number of possible combination in a subArea )
    - Class quare : class square represent the smallest unit of a sodoku puzzle.
      This class have 4 worth mentionning methods:
        + color   : Which return the color of the subArea this Square belong to
        + neighbor: Return all adjacent squre
        + addArea : Which change add this square to its 4 areas : row ,column , box
      THis class have a companion object which an apply method , which can be useful when dealing with
      Json file

    - Trait Area : this trait take a Vector of Square as parametter
      The trait have 3 methods:
        +usedDigits: a helper methods that return all used digit in the area based on the game rule
        +validate  : Return a boolean value that tell  wheter the game rule is validated
        +addSquares: this method will call the addArea of the square memember in the parametter which

    - case Class row , collumn , box : all three extends from area , they will be useful when checking if
     the game is over or not
    - case Class subarea : The class is intened to be a case class since the square list is immutatble (thought
     the value of memmber square  can change ) .ALso , this could be helpfull when trying to read and
     parse date using circe.
      this class have have flowing worth mentioning methods:
       + newcolor() : Try a randomly choosen cloring in possible color
       + upDatepossibleColor () : When this methods is call the the problem check all near by Area and
        update possible color list
       + neigbor() :Return all neigbor of this area
       + override validate : check if this the current sum is greater than the intended sum
       + MISSING methods : return all possilbe number of square in the area

    - CLass puzzle : This class combine all the class above mention into one .It have serveral
    auxiliary methods that would take long to discuss , so I only list two that I think you should know:
      +coloring   :Backtracking coloring scheme
      +setupPuzzle:Linked all instances of above mentioned class together

  Now let talk about the GUI
    My ideas is very simple I will link an instance of StackedSquare class to a Square instance
    and grouped them into a gridPane: ( forgot to mention I use SCALAFX)
      A StackedSquare is extened a stacked pane: and it have 4 component :
        + A background square whose color is based on the subArea: THe color will be darken
        when its parent ( the StackedSquare is hovered)
        + A Number box : which reprent the value of the square.
        + A boundary path : which outline the square
        + A number on top left of the pane if the square this pane represent is the first one
        of the subArea the square belong to.
    The GUI is not finnished though , I still needed to implement a menubar , something to popup
    when players win alo , St that repesent possible number acoording to game rule. Yet , I think
    the structure of the GUI is fixed , and I only need to add new row and collums to the girdPane
    and all is done. (THis should be simple , hopefully )


  The GUI and will communicate via the Object Sodoku. Sodoku will do the stuff in the menu
  (save, load ,..... :) , and as mentioned in the plane , the game will have undo and redo. Thus
  the command pattern will be used . Sodoku will call command via an instance invoker class ( which
  inclee a stack of case class SetValueCommand)

  Another intention of my behind this design strat is to seperate the GUI and the game Logic .
  However , I am not too sure whether I have done it right or not so I will appreaciate any
  advice from you

  I will try to write proper test in the next two weeks, and finish the project before the second
  reports. I have physically testing them via GUI and println ,but  If you notice anything while
  running the GUI , pls tell me .

  ALso , about the testing plans , I haven't implemented any proper test , but I have physically tested
  all the feature I have implemented . I already have some ideas for the methods in logics ,and I will
  implement them in the next two weeks .Yet ,concerning the GUI and  reading and parsing JSON , I have little ideas how to test them.
  If you have any advice pls tell me.

  About the workload , I didn't really count but maybe 10-20 odds . I think I am a little ahead
  of the official schedule .

  BR
  Quan , or call me Ramsey
Ps1: I think I can speed run this project before ,20/3. Is it possible to request not a proper "grading" by that time.
That is , It is possible for me to get feedback based on what I have done based on the evaluation criteria




20/3 interim report:
  In the last two weeks , I have make some adjustment regarding how GUI package was structured as well as implementign a file management scheme with os.lib
  The changes in the GUI include seperating Components into Grid_Node and Grid_Node's component .In Grid_Node you can find the old Stacked Square with some new feature
, and the new class BottomStackPane which indicate if one number digit can fit in a square according to the basic sodoku rule.Before making some comment about the new class ,
I want to talk about SodokuGrid which exteneded from GridPane . SodokuGrid is essentially a GridPane ,withone extra methods: 
     + update() : which together with the new file magagement scheme allow the programm to swap into new sodoku puzzle .In detail , whenever player load the newfile , given the
     file is valid , this methods will erase all children Node in the grid , and replace them with new one. 
  Sodokugrid will have 9 column and 10 rows . The first 9 columns will be used to show the puzzle and the last row will be combined to show the possible combnation .Thus 9 instance
of BottomStackPane will be used to indicate 9 numbers from 1-9 . This class will work such that valid number will have color White while the other will be left black.
  StackedSquare also have a outline path as well a dotted path which seperate Boxed and SubAreas respectively
  
  Concernign the file management scheme , I will use circe lib with Os.lib to read and decode file .Circe is amazingly convenient as it can automaticly derive and ,encode file .
The same thing can be said with os.lib which is capable of handling relative file path ,and managing stream so I won't have to worry about forgetting to close a file .
I have tested them with the GUI , and the result was possitive . But there is some sort of expection needed to be handler ( for instance , when trying to read an invalid file ,
or when the user don't chosse any file.
     
  
  
  
   

